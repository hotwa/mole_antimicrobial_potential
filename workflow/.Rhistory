library(tidyverse)
library(readxl)
library(ggrepel)
mole_predictions <- read_excel("../data/single_label_XGB_strainAnnots.xlsx", sheet = "mole_overview") %>%
filter(!(srn_code %in% c("lp7_C23", "lp9_I12", "lp8_L6", "lp9_E10"))) # Present in Maier
chemical.information <- read_tsv("../../stressregnet_analysis/data/001-compound_exploration/chemical_library.tsv.gz")
fps_full <- vroom::vroom("../../stressregnet_analysis//data/001-compound_exploration/ecfp4_full.tsv.gz")
mole_full <- vroom::vroom("../../stressregnet_analysis/data/001-compound_exploration/graphBT_R1k_E8kl1e3_representation.tsv.gz")
library(uwot)
chem.metadata <- chem.metadata %>%
filter(srn_code %in% mole_predictions$srn_code)
fda_strs = c("1- 2- 3-",
"1-FDAapproved 2- 3-")
metabol_strs = c("1-FDAapproved 2-EndoMetabolites 3-",
"1- 2-EndoMetabolites 3-")
food_strs = c("1- 2-EndoMetabolites 3-FoodHomology",
"1- 2- 3-FoodHomology", "1-FDAapproved 2- 3-FoodHomology",
"1-FDAapproved 2-EndoMetabolites 3-FoodHomology")
chem.metadata <- chemical.information %>%
mutate(general.annot = case_when(`Original lib` %in% fda_strs ~ "FDA approved drug",
`Original lib` %in% metabol_strs ~ "Metabolites",
`Original lib` %in% food_strs ~ "Food compound",
TRUE ~ "not_classified"),
libplate = str_replace(`Library plate`, "LibPlate", "lp"),
srn_code = paste0(libplate, "_", `New well`),
screen.status = if_else(libplate %in% paste0("lp", 1:7), "assayed", "not_assayed")) %>%
select(`Catalog Number`, srn_code, ProductName, general.annot, screen.status, M.Wt, final_abx)
fda_strs = c("1- 2- 3-",
"1-FDAapproved 2- 3-")
metabol_strs = c("1-FDAapproved 2-EndoMetabolites 3-",
"1- 2-EndoMetabolites 3-")
food_strs = c("1- 2-EndoMetabolites 3-FoodHomology",
"1- 2- 3-FoodHomology", "1-FDAapproved 2- 3-FoodHomology",
"1-FDAapproved 2-EndoMetabolites 3-FoodHomology")
chem.metadata <- chemical.information %>%
mutate(general.annot = case_when(`Original lib` %in% fda_strs ~ "FDA approved drug",
`Original lib` %in% metabol_strs ~ "Metabolites",
`Original lib` %in% food_strs ~ "Food compound",
TRUE ~ "not_classified"),
libplate = str_replace(`Library plate`, "LibPlate", "lp"),
srn_code = paste0(libplate, "_", `New well`),
screen.status = if_else(libplate %in% paste0("lp", 1:7), "assayed", "not_assayed")) %>%
select(`Catalog Number`, srn_code, ProductName, general.annot, screen.status, M.Wt, final_abx)
chem.metadata <- chem.metadata %>%
filter(srn_code %in% mole_predictions$srn_code)
fps_full <- fps_full %>%
#filter(`Catalog Number` %in% chem.metadata$`Catalog Number`) %>%
column_to_rownames("Catalog Number")
mole_full <- mole_full %>%
rename("Catalog Number" = "...1") %>%
filter(`Catalog Number` %in% chem.metadata$`Catalog Number`)  %>%
column_to_rownames("Catalog Number")
hamming <- function(X) {
D <- (1 - X) %*% t(X)
HamDist <- D + t(D)
return(HamDist / ncol(X))
}
remove_rare <-  function(f.df, min_chems){
# Removes columns where a feature is not present in the majority of compounds
#
#   Parameters
#   ----------
#   - fdf: pandas dataframe. Columns are bits of the fingerprint. Rows are compounds
#   - mc: int. The minimum number of molecules a feature should be present in order for it to be preserved
# Number of chemicals a feature is present in
n.freq <- colSums(f.df)
names(n.freq) <- colnames(f.df)
# Filter popular features
common.features <- n.freq[n.freq >= min_chems]
# Alter df
f.common <- f.df %>%
select(all_of(names(common.features)))
return(f.common)
}
remove_correlated <- function(f.df, min_dist){
# Removes highly similar features
#
#   Parameters
#   ----------
#   - fdf: pandas dataframe. Dataframe where columns are bits in the fingerprint
#   - mdist: float. Is minimal distance between features in order to be different enough
#
#   Returns
#   -------
#   pandas dataframe
#   Highly correlated features are removed (one of them is preserved)
# Hamming distance
dist.matrix <-  hamming(t(f.df))
# Format
dist.matrix[lower.tri(dist.matrix, diag = TRUE)] <- 1
# Find correlated columns
corr.descision <- apply(dist.matrix, 2, function(x){ifelse(any(x <= min_dist), "remove", "remain")})
# Only keep un-correlated feats
keep_cols <- names(corr.descision[corr.descision == "remain"])
# Filter df
f.uncorr <- f.df %>%
select(all_of(as.character(keep_cols)))
return(f.uncorr)}
preprocess_fps <- function(fps_df, min_compounds, sim_threshold){
# Processes a fingerprint dataframe. Removes rare and highly correlated features
#
# Parameters
# ----------
# - fps_df: pandas dataframe. Dataframe where columns are bits in the fingerprint
# - min_compounds: int. The minimum number of molecules a feature should be present in order for it to be preserved
# - sim_threshold: float. Is minimal distance between features in order to be different enough
fps_common <-  remove_rare(fps_df, min_compounds)
fps.decorr <-  remove_correlated(fps_common, sim_threshold)
return(fps.decorr)
}
fps_prepared <- preprocess_fps(fps_full, 10, 0.01)
remove_constant <- function(m.df, var.cutoff){
# Variance of each dimension
var.feats <-  apply(m.df, 2, var)
# Keep columns above variance thresh
keep_cols <- names(var.feats[var.feats > var.cutoff])
# Filter df
m.var.df <- m.df %>%
select(all_of(as.character(keep_cols)))
return(m.var.df)
}
remove_corfeats <- function(m.df, cor.thresh){
# Correlation Matrix
cor.mat <-  cor(m.df)
# Format triangle
cor.mat[lower.tri(cor.mat, diag = TRUE)] <- 0
# Find correlated columns
corr.descision <- apply(cor.mat, 2, function(x){ifelse(any(x >= cor.thresh), "remove", "remain")})
# Keep columns
keep_cols <- names(corr.descision[corr.descision == "remain"])
# Filter df
m.uncor <- m.df %>%
select(all_of(keep_cols))
return(m.uncor)
}
preprocess_mole <- function(mole_df, min.var, corr.thresh){
# Filter variance
mole.variable <- remove_constant(mole_df, min.var)
# Filter correlated
mole.decorrelated <- remove_corfeats(mole.variable, corr.thresh)
return(mole.decorrelated)
}
mole_prepared <- preprocess_mole(mole_full, 0.01, 0.90)
mole_prepared <- read_tsv("../data/16.srn_predictions/mole_umap_coords.tsv.gz")
mole_prepared <- mole_prepared %>%
column_to_rownames("catalog_number")
mole.noannot <- mole.umap %>%
ggplot(aes(x=V1, y=V2)) +
geom_point(alpha=0.9, color="white", fill="#C5C5C5",
size=2, shape=21, stroke=0.2) +
theme_classic() +
labs() +
theme(text=element_text(size=15))
set.seed(1234)
mole.umap <- umap(X=mole_prepared,
n_neighbors = 25,
n_components = 2,
min_dist = 0.35,
n_threads = 20,
metric="cosine")
mole.umap <- as.data.frame(mole.umap)
mole.noannot <- mole.umap %>%
ggplot(aes(x=V1, y=V2)) +
geom_point(alpha=0.9, color="white", fill="#C5C5C5",
size=2, shape=21, stroke=0.2) +
theme_classic() +
labs() +
theme(text=element_text(size=15))
mole.noannot
mole.umap <- mole.umap %>%
rownames_to_column("Catalog Number") %>%
mutate(representation = "MolE")
umam.metadata <- rep.umap %>%
left_join(chem.metadata, by="Catalog Number")
mole.metadata <- mole.umap %>%
left_join(chem.metadata, by="Catalog Number")
m.gannot <- mole.umap %>%
left_join(chem.metadata, by="Catalog Number") %>%
ggplot(aes(x=V1, y=V2)) +
geom_point(aes(fill=general.annot), alpha=0.7,
size=2, shape=21, color="white", stroke=0.2) +
scale_fill_brewer(palette = "Dark2") +
theme_classic() +
theme(legend.position = "bottom",
axis.ticks.x = element_blank(),
axis.text.x = element_blank(),
axis.ticks.y = element_blank(),
axis.text.y = element_blank(),
text=element_text(size=14),
panel.background = element_rect(fill = "transparent", color=NA),
plot.background = element_rect(fill = "transparent", colour = NA)) +
labs(title="MedChemExpres Chemical Space",
subtitle = "MolE representation",
x="UMAP 1",
y="UMAP 2",
fill="General Annotation")
m.gannot
ggsave("../data/16.srn_predictions/mole_medchemexpress.png", dpi=300,
plot=m.gannot, height = 6.5, width = 7.5)
mole_cutoff <- read_excel("../data/single_label_XGB_strainAnnots.xlsx", sheet = "mole_over10")
umam.metadata <- mole.metadata %>%
mutate(predicted_antimicrobial = if_else(srn_code %in% mole_cutoff$srn_code, "Antimicrobial", "not_antimicrobial")) %>%
left_join(mole_predictions %>% select(srn_code, total_nkill), by="srn_code")
u.df <- umam.metadata %>%
dplyr::filter(representation == "MolE") %>%
mutate(ProductName = if_else(predicted_antimicrobial == "not_antimicrobial", "", ProductName))
colors <- c("Antimicrobial" = alpha("#DE1F84", 0.7), "Not Antimicrobial" = alpha("#C5C5C5", 0.7))
m.umap <- ggplot(u.df, aes(x=V1, y=V2)) +
geom_point(data=subset(u.df, predicted_antimicrobial == "not_antimicrobial"), aes(color="Not Antimicrobial"), size=1.5) +
geom_point(data=subset(u.df, predicted_antimicrobial == "Antimicrobial"), aes(color="Antimicrobial"), size=1.5) +
scale_color_manual(values=colors) +
theme_void() +
coord_fixed(ratio = 0.4) +
theme(legend.position = "bottom",
axis.ticks.x = element_blank(),
axis.text.x = element_blank(),
axis.ticks.y = element_blank(),
axis.text.y = element_blank(),
text=element_text(size=10),
panel.background = element_rect(fill = "transparent", color=NA),
plot.background = element_rect(fill = "transparent", colour = NA)) +
labs(x="UMAP 1",
y="UMAP 2",
color="Predicted Activity")
# u.df <- umam.metadata %>%
#   dplyr::filter(representation == "ECFP4") %>%
#   mutate(ProductName = if_else(predicted_antimicrobial == "not_antimicrobial", "", ProductName))
#
#
# e.umap <- ggplot(u.df, aes(x=V1, y=V2)) +
#
#   geom_point(data=subset(u.df, predicted_antimicrobial == "not_antimicrobial"), color="#C5C5C5") +
#   geom_point(data=subset(u.df, predicted_antimicrobial == "antimicrobial"), color="red") +
#
#   theme_light() +
#
#   labs(title="Predicted antimicrobial compounds",
#        subtitle = "ECFP4",
#        x="UMAP 1",
#        y="UMAP 2")
m.umap
#e.umap
ggsave("../data/16.srn_predictions/mole_umap_over10preds.png", dpi=300, plot=m.umap, width = 13.97, height = 13.59, units = "cm")
ggsave("../data/16.srn_predictions/mole_umap_over10preds.pdf", plot=m.umap, width = 7.5, height = 5.5, units = "cm")
m.umap.p <- ggplot(u.df, aes(x=V1, y=V2)) +
geom_point(data=subset(u.df, predicted_antimicrobial == "not_antimicrobial"), aes(color="Not Antimicrobial"), size=3) +
geom_point(data=subset(u.df, predicted_antimicrobial == "Antimicrobial"), aes(color="Antimicrobial"), size=4.5) +
scale_color_manual(values=colors) +
theme_void() +
theme(legend.position = "bottom",
axis.ticks.x = element_blank(),
axis.text.x = element_blank(),
axis.ticks.y = element_blank(),
axis.text.y = element_blank(),
text=element_text(size=24),
panel.background = element_rect(fill = "transparent", color=NA),
plot.background = element_rect(fill = "transparent", colour = NA)) +
labs(x="UMAP 1",
y="UMAP 2",
color="Predicted Activity",
title = "MedChemExpress Library",
subtitle = latex2exp::TeX("Predicted to ihibit $\\geq$ 10 strains"))
m.umap.p
ggsave("../data/16.srn_predictions/mole_umap_over10preds.png", dpi=300, plot=m.umap.p, width = 30.23, height = 24.31, units = "cm")
top6_pred <- c("Ospemifene",
"Ellagic acid",
"Doxifluridine",
"Shionone",
'Bekanamycin')
selected_chems <- c("Visomitin",
"Ebastine",
"Opicapone",
"Cetrorelix (Acetate)",
'Thymidine',
"Elvitegravir")
u.df <- umam.metadata %>%
dplyr::filter(representation == "MolE") %>%
mutate(ProductName = if_else(ProductName %in% c(top6_pred, selected_chems), ProductName, ""))
m.umap.annot <- ggplot(u.df, aes(x=V1, y=V2, label = ProductName)) +
geom_point(data=subset(u.df, predicted_antimicrobial == "not_antimicrobial" & ProductName == ""), color=alpha("#C5C5C5", 0.25)) +
geom_point(data=subset(u.df, predicted_antimicrobial == "Antimicrobial" & ProductName == ""), color=alpha("#DE1F84", 0.25)) +
geom_text_repel(max.overlaps = Inf, size=2.5, min.segment.length = 0) +
geom_point(data=subset(u.df, ProductName != ""), color="#DE1F84") +
theme_light() +
labs(title="MedChemExpress Chemical Space",
subtitle = "Top 6 Prioritised molecules (MolE)",
x="UMAP 1",
y="UMAP 2")
m.umap.annot
colors <- c("Antimicrobial" = alpha("#DE1F84", 0.7), "Not Antimicrobial" = alpha("#C5C5C5", 0.7))
m.umap.annot.highlight <- ggplot(u.df, aes(x=V1, y=V2)) +
geom_point(data=subset(u.df, predicted_antimicrobial == "not_antimicrobial"), aes(color="Not Antimicrobial"), size=1.5, alpha=0.25) +
geom_point(data=subset(u.df, predicted_antimicrobial == "Antimicrobial"), aes(color="Antimicrobial"), size=1.5, alpha=0.25) +
scale_color_manual(values=colors) +
geom_point(data=subset(u.df, ProductName != ""), color="#DE1F84", size=3) +
theme_void() +
theme(legend.position = "bottom",
axis.ticks.x = element_blank(),
axis.text.x = element_blank(),
axis.ticks.y = element_blank(),
axis.text.y = element_blank(),
text=element_text(size=12),
panel.background = element_rect(fill = "transparent", color=NA),
plot.background = element_rect(fill = "transparent", colour = NA)) +
labs(x="UMAP 1",
y="UMAP 2",
color="Predicted Activity")
m.umap.annot.highlight
ggsave("../data/16.srn_predictions/mole_umap_selected.png",plot=m.umap.annot.highlight, dpi=300, width = 14.47, height = 13.75, units = "cm")
pred.over10.df <- read_excel("../data/single_label_XGB_strainAnnots.xlsx", sheet = "mole_over10")
known.activity <- pred.over10.df %>%
# Only consider non-antibiotics
dplyr::filter(final_abx == "not_abx") %>%
# Consolidate antiparasitic category
mutate(`Reported Activity` = if_else(`Reported Activity` %in% c("Antiplasmodium", "Insecticide"), "Antiparasitic", `Reported Activity`)) %>%
count(`Reported Activity`) %>%
mutate(`Reported Activity` = factor(`Reported Activity`, levels=c("None", "Antiparasitic", "Antifungal", "Antiviral","Antibacterial")),
x=" ")
known.activity
reported.g <- ggplot(known.activity, aes(x=x, y=n, fill=`Reported Activity`)) +
geom_bar(position="fill", stat="identity", color="black") +
scale_fill_manual(breaks = c("Antibacterial", "Antiviral", "Antifungal", "Antiparasitic", "None"),
values = c("#1b9e77", "#d95f02", "#7570b3", "#e7298a", "#C5C5C5")) +
theme_classic() +
coord_flip() +
theme(text=element_text(size=14),
legend.position = "bottom") +
labs(y="Proportion", x="Predicted Antimicrobial",
fill = "Reported Activity",
title = "Reported activity of non-antibiotic compounds")
reported.g
ggsave(plot=reported.g, filename = "../data/16.srn_predictions/proportion_reportedActivity_NonAntibiotics.png",
height =8, width = 18.45, dpi=300, units="cm")
reported.g <- ggplot(known.activity, aes(x=n, y=x, fill=`Reported Activity`)) +
geom_bar(position="fill", stat="identity", color="black") +
scale_fill_manual(breaks = c("Antibacterial", "Antiviral", "Antifungal", "Antiparasitic", "None"),
values = c("#1b9e77", "#d95f02", "#7570b3", "#e7298a", "#C5C5C5")) +
theme_classic() +
coord_flip() +
theme(text=element_text(size=10),
legend.position = "right",
aspect.ratio = 3,
legend.text = element_text(size = 8),
legend.title = element_text(size=8)) +
labs(x="Proportion with reported activity",
y="Predicted antimicrobial",
fill = "Reported Activity")
reported.g
ggsave(plot=reported.g, filename = "../data/16.srn_predictions/proportion_reportedActivity_NonAntibiotics.png", height = 7, width = 3, dpi=300)
complete_mole <- read_excel("../data/single_label_XGB_strainAnnots.xlsx", sheet = "mole_overview") %>%
select(srn_code, total_nkill, nkill_Gnegative, nkill_Gpositive, final_abx)
gmean_mole <- read_excel("../data/single_label_XGB_strainAnnots.xlsx", sheet = "mole_scores") %>%
select(srn_code, gmean_score, gmeanScore_Gnegative, gmeanScore_Gpositive)
mole_scores <- complete_mole %>%
left_join(gmean_mole, by="srn_code")
score.nkill.scatter <- mole_scores %>%
mutate(final_abx = if_else(final_abx == "abx", "Antibiotic", "Non-Antibiotic")) %>%
ggplot(aes(x=total_nkill, y=log(gmean_score), color=final_abx)) +
geom_point(alpha=0.5, size=1) +
scale_color_manual(breaks = c("Antibiotic", "Non-Antibiotic"),
values=c("red", "#C5C5C5")) +
geom_vline(xintercept = 10, linetype="longdash") +
theme_light() +
labs(x="Predicted number of inhibited strains",
y = "Antimicrobial Potential",
color="Compound Class") +
theme(legend.position = c(0.7, 0.3),
text=element_text(size=10),
legend.text = element_text(size=8),
legend.title = element_text(size=8))
score.vs.nkill.marginal <- ggExtra::ggMarginal(score.nkill.scatter, type="boxplot", groupColour = TRUE, groupFill = TRUE)
score.vs.nkill.marginal
ggsave(plot=score.vs.nkill.marginal, filename = "../data/16.srn_predictions/score_vs_nkill.png", dpi=300,
height = 7.98, width = 14.49, units="cm")
score.nkill.presentation <- mole_scores %>%
mutate(final_abx = if_else(final_abx == "abx", "Antibiotic", "Non-Antibiotic")) %>%
ggplot(aes(x=total_nkill, y=log(gmean_score), color=final_abx)) +
geom_point(alpha=0.5, size=2) +
scale_color_manual(breaks = c("Antibiotic", "Non-Antibiotic"),
values=c("red", "#C5C5C5")) +
geom_vline(xintercept = 10, linetype="longdash") +
theme_light() +
labs(x="Predicted number of inhibited strains",
y = latex2exp::TeX("Antimicrobial Potential $G$"),
color="Compound Class") +
theme(legend.position = c(0.7, 0.3),
text=element_text(size=14),
legend.text = element_text(size=14),
legend.title = element_text(size=14))
score.vs.nkill.marginal.presentation <- ggExtra::ggMarginal(score.nkill.presentation, type="boxplot", groupColour = TRUE, groupFill = TRUE)
score.vs.nkill.marginal.presentation
ggsave(plot=score.vs.nkill.marginal.presentation, filename = "../data/16.srn_predictions/score_vs_nkill.png", dpi=300,
height = 10.14, width = 18.42, units="cm")
over10.info <- pred.over10.df %>%
dplyr::filter(final_abx == "not_abx") %>%
# Consolidate
mutate(`Reported Activity` = if_else(`Reported Activity` %in% c("Antiplasmodium", "Insecticide"), "Antiparasitic", `Reported Activity`)) %>%
select(srn_code, ProductName, `Reported Activity`)
over10.scores <- mole_scores %>%
dplyr::filter(srn_code %in% over10.info$srn_code) %>%
left_join(over10.info, by="srn_code")
over10.scores
selected_chems <- c("Visomitin",
"Ebastine",
"Opicapone",
"Cetrorelix (Acetate)",
'Thymidine',
"Elvitegravir")
uridin.deriv <- c("Uridine",
"Uridine 5'-monophosphate",
"5-Methyluridine",
"2'-Deoxyuridine",
"Doxifluridine")
other.interest <- c("Tannic acid",
"Teniposide")
selected.chemicals.data <- over10.scores %>%
mutate(ProductName = if_else(ProductName %in% selected_chems, ProductName, ""),
ProductName = if_else(ProductName == "Cetrorelix (Acetate)", "Cetrorelix", ProductName))
uridine.deriv.data <- over10.scores %>%
mutate(ProductName = if_else(ProductName %in% uridin.deriv, ProductName, ""))
other.interest.data <- over10.scores %>%
mutate(ProductName = if_else(ProductName %in% other.interest, ProductName, ""))
gram.vs.gram.scatter <- ggplot(over10.scores, aes(x=log(gmeanScore_Gnegative), y=log(gmeanScore_Gpositive), color=`Reported Activity`)) +
geom_point(size=1) +
geom_abline(linetype="longdash", alpha=0.25) +
geom_text_repel(data = selected.chemicals.data, aes(x=log(gmeanScore_Gnegative), y=log(gmeanScore_Gpositive), label=ProductName),
max.overlaps = Inf, size=2, min.segment.length = 0, color="black", box.padding = 0.7, point.padding = 0.2, fontface="bold",
nudge_x = if_else(selected.chemicals.data$ProductName %in% c("Cetrorelix", "Ebastine"), -1, 0)) +
geom_text_repel(data = uridine.deriv.data, aes(x=log(gmeanScore_Gnegative), y=log(gmeanScore_Gpositive), label=ProductName),
max.overlaps = Inf, size=1.8, min.segment.length = 0, color="black", box.padding = 0.7, point.padding = 0.2,
nudge_x = if_else(uridine.deriv.data$ProductName %in% c("Uridine"), -1, 0)) +
geom_text_repel(data = other.interest.data, aes(x=log(gmeanScore_Gnegative), y=log(gmeanScore_Gpositive), label=ProductName),
max.overlaps = Inf, size=1.8, min.segment.length = 0, color="black", box.padding = 0.7, point.padding = 0.2) +
scale_color_manual(breaks = c("Antibacterial", "Antiviral", "Antifungal", "Antiparasitic", "None"),
values = c("#1b9e77", "#d95f02", "#7570b3", "#e7298a", "#C5C5C5")) +
theme_light() +
theme(legend.position = "bottom",
text = element_text(size=10)) +
labs(x = latex2exp::TeX("Antimicrobial Potential $G^-$"),
y = latex2exp::TeX("Antimicrobial Potential $G^+$"))
gram.vs.gram.scatter
ggsave(plot=gram.vs.gram.scatter, filename = "../data/16.srn_predictions/comparing_score_gramstain.png", dpi=300, height = 5, width = 8)
library(ggpubr)
top_row <- ggarrange(m.umap, reported.g, nrow = 1, ncol = 2, labels = c("a", "b"),
widths = c(1, 0.5),
heights = c(1, 2),
font.label = list(size = 12, color = "black", face = "plain"))
top_row
bottom_row <- ggarrange(score.vs.nkill.marginal, NULL, gram.vs.gram.scatter + theme(legend.position = "none"),
nrow = 1, ncol = 3, labels = c("c", "", "d"), widths = c(1, 0.1, 1),
font.label = list(size = 12, color = "black", face = "plain"))
bottom_row
score.nkill.scatter <- mole_scores %>%
mutate(final_abx = if_else(final_abx == "abx", "Antibiotic", "Non-Antibiotic")) %>%
ggplot(aes(x=total_nkill, y=log(gmean_score), color=final_abx)) +
geom_point(alpha=0.5, size=1) +
scale_color_manual(breaks = c("Antibiotic", "Non-Antibiotic"),
values=c("red", "#C5C5C5")) +
geom_vline(xintercept = 10, linetype="longdash") +
theme_light() +
labs(x="Predicted number of inhibited strains",
y = latex2exp::TeX("Antimicrobial Potential $G$"),
color="Compound Class") +
theme(legend.position = c(0.7, 0.3),
text=element_text(size=10),
legend.text = element_text(size=8),
legend.title = element_text(size=8))
score.vs.nkill.marginal <- ggExtra::ggMarginal(score.nkill.scatter, type="boxplot", groupColour = TRUE, groupFill = TRUE)
score.vs.nkill.marginal
ggsave(plot=score.vs.nkill.marginal, filename = "../data/16.srn_predictions/score_vs_nkill.png", dpi=300,
height = 7.98, width = 14.49, units="cm")
bottom_row <- ggarrange(score.vs.nkill.marginal, NULL, gram.vs.gram.scatter + theme(legend.position = "none"),
nrow = 1, ncol = 3, labels = c("c", "", "d"), widths = c(1, 0.1, 1),
font.label = list(size = 12, color = "black", face = "plain"))
bottom_row
complete_panel <- ggarrange(top_row,
NULL,
bottom_row,
nrow = 3, ncol = 1, heights = c(1, 0.05, 1.1))
complete_panel
ggsave(plot = complete_panel, filename = "../data/16.srn_predictions/mole_predictions_figurepanel_raw.pdf", width = 21, height = 15, units = "cm")
ggsave(plot = complete_panel, filename = "../data/16.srn_predictions/mole_predictions_figurepanel_altv2.svg", width = 21, height = 15, units = "cm")
